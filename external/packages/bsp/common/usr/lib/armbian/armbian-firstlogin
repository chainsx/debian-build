#!/bin/bash
#
# Copyright (c) Authors: https://www.armbian.com/authors
#
# This file is licensed under the terms of the GNU General Public
# License version 2. This program is licensed "as is" without any
# warranty of any kind, whether express or implied.

. /etc/board-release

check_abort()
{
	echo -e "\nDisabling user account creation procedure\n"
	if [[ ${USER_SHELL} == zsh ]]; then
		printf "\nYou selected \e[0;91mZSH\x1B[0m as your default shell. If you want to use it right away, please logout and login! \n\n"
	fi
	trap - INT
	exit 0
}

read_password()
{
	unset password
	unset charcount
	prompt="$1 password: "

	stty -echo

	charcount=0
	while IFS= read -p "$prompt" -r -s -n 1 char
	do
		if [[ $char == $'\0' ]]
		then
			break
		fi

		# Handle backspace
		if [[ $char == $'\177' ]]
		then
			if [ $charcount -gt 0 ]
			then
				charcount=$((charcount-1))
				prompt=$'\b \b'
				password="${password%?}"
			else
				prompt=''
			fi
		else
			charcount=$((charcount+1))
			prompt='*'
			password+="$char"
		fi
	done

	stty echo
}

set_shell()
{
	optionsAudits=($(cat /etc/shells | grep "zsh\|/bash" | sed 's/\/bin\///g' | sed 's/\/usr//g' | uniq))
	USER_SHELL="bash"

	if [[ "${#optionsAudits[@]}" -gt 1 ]]; then
		while :
			do
				i=1
				echo -e "\nChoose default system command shell:\n"
				for o in  "${optionsAudits[@]}"; do
					echo "$i) $o"
					let i++
				done
				read -n1 -s reply
				case $reply in
					"1"|"${optionsAudits[0]}") USER_SHELL="${optionsAudits[0]}"; break;;
					"2"|"${optionsAudits[1]}") USER_SHELL="${optionsAudits[1]}"; break;;
					*) USER_SHELL="${optionsAudits[0]}"; break;;
				esac
			done
	fi
	SHELL_PATH=$(grep /$USER_SHELL$ /etc/shells | tail -1)

	chsh -s $(grep -iF "/$USER_SHELL" /etc/shells | tail -1)
	echo -e "\nShell: \x1B[92m${USER_SHELL^^}\x1B[0m"

	# change shell for future users
	sed -i "s|^SHELL=.*|SHELL=${SHELL_PATH}|" /etc/default/useradd
	sed -i "s|^DSHELL=.*|DSHELL=${SHELL_PATH}|" /etc/adduser.conf
}

set_timezone_and_locales()
{
	# Grab this machine's public IP address
	PUBLIC_IP=`curl --max-time 5 -s https://ipinfo.io/ip`

	# Check if we have wireless adaptor
    WIFI_DEVICE=$(LC_ALL=C nmcli dev status | grep  " wifi " 2>/dev/null)

	if [ -z "$PUBLIC_IP" ]; then
		# ask for connecting to wireless if wifi device is found
		if [[ -n "$WIFI_DEVICE" ]]; then
			echo -e "Internet connection was \x1B[91mnot detected\x1B[0m."
			echo ""
			read -n1 -s -r -p "Connect via wireless? [Y/n] " response
			echo ""
			if [[ "${response}" =~ ^(Y|y|"")$ ]]; then
				nmtui-connect
			fi
			echo ""
		fi
	fi

	# Grab IP once again if not found
	[[ -z "$PUBLIC_IP" && -n "$WIFI_DEVICE" ]] && PUBLIC_IP=`curl --max-time 5 -s https://ipinfo.io/ip`

	# Call the geolocation API and capture the output
	RES=$(
		curl --max-time 5 -s http://ipwhois.app/json/${PUBLIC_IP} | \
			jq '.timezone, .country, .country_code' | \
			while read -r TIMEZONE; do
				read -r COUNTRY
				echo "${TIMEZONE},${COUNTRY},${COUNTRYCODE}" | tr --delete \"
			done
		)

	TZDATA=$(echo ${RES} | cut -d"," -f1)
	STATE=$(echo ${RES} | cut -d"," -f2)
	CCODE=$(echo ${RES} | cut -d"," -f3 | xargs)
	echo -e "Detected timezone: \x1B[92m$TZDATA\x1B[0m"
	echo ""
	unset response
	while [[ ! "${response}" =~ ^(Y|y|N|n)$ ]]; do
		read -n1 -s -r -p "Set user language based on your location? [Y/n] " response
		echo ""
	done
	# change it only if we have a match and if we agree
	if [[ "${response}" =~ ^(N|n)$ ]]; then
		unset CCODE TZDATA
	fi

	LOCALES=$(grep territory /usr/share/i18n/locales/* | grep _"$CCODE" | cut -d ":" -f 1 | cut -d "/" -f 6 |  \
	xargs -I{} grep {} /usr/share/i18n/SUPPORTED | grep "\.UTF-8" | cut -d " " -f 1)
	# UTF8 is not present everywhere so check again in case it returns empty value
	[[ -z "$LOCALES" ]] && LOCALES=$(grep territory /usr/share/i18n/locales/* | grep _"$CCODE" | cut -d ":" -f 1 | cut -d "/" -f 6 |  \
	xargs -I{} grep {} /usr/share/i18n/SUPPORTED | cut -d " " -f 1)

	options=(`echo ${LOCALES}`);

	# when having more locales, prompt for choosing one
	if [[ "${#options[@]}" -gt 1 ]]; then
		options+=("Skip generating locales")
		echo -e "\nAt your location, more locales are possible:\n"
		PS3='Please enter your choice:'
		select opt in "${options[@]}"
        do
            if [[ " ${options[@]} " =~ " ${opt} " ]]; then
                LOCALES=${opt}
                break
            fi
        done
    fi

	if [[ "${LOCALES}" != *Skip* ]]; then
		# if TZDATA was not detected, we need to select one
		if [[ -z ${TZDATA} ]]; then
			TZDATA=$(tzselect | tail -1)
		fi

		timedatectl set-timezone "${TZDATA}"
		dpkg-reconfigure --frontend=noninteractive tzdata > /dev/null 2>&1

		# generate locales
		echo ""
		sed -i 's/# '"${LOCALES}"'/'"${LOCALES}"'/' /etc/locale.gen
		echo -e "Generating locales: \x1B[92m${LOCALES}\x1B[0m"
		locale-gen "${LOCALES}" > /dev/null 2>&1

		# setting detected locales only for user
		echo "export LC_ALL=$LOCALES" >> /home/"$RealUserName"/.bashrc
		echo "export LANG=$LOCALES" >> /home/"$RealUserName"/.bashrc
		echo "export LANGUAGE=$LOCALES" >> /home/"$RealUserName"/.bashrc
		echo "export LC_ALL=$LOCALES" >> /home/"$RealUserName"/.xsessionrc
		echo "export LANG=$LOCALES" >> /home/"$RealUserName"/.xsessionrc
		echo "export LANGUAGE=$LOCALES" >> /home/"$RealUserName"/.xsessionrc
	fi
}
